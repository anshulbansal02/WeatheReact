{"version":3,"sources":["WeatherCard.js","SearchBar.js","api/unsplash.js","api/weather.js","App.js","index.js"],"names":["WeatherCard","state","weatherIcon","bgColor","textColor","schemes","clear","cloudy","drizzle","rain","smoke","thunderstorm","snow","haze","tornado","error","assingScheme","wId","console","log","includes","assignScreen","props","data","className","style","background","src","alt","scheme","id","color","location","CountryCodes","code","temperature","description","wind_speed","humidity","pressure","this","React","Component","SearchBar","query","onSubmit","event","preventDefault","onSub","q","type","placeholder","onChange","e","setState","target","value","onClick","window","navigator","geolocation","getCurrentPosition","pos","lat","coords","latitude","lon","longitude","name","axios","create","baseURL","headers","authorization","App","fetchBackground","des","a","unsplash","get","params","response","fetchWeather","weather","Math","round","main","temp","wind","speed","sys","country","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.13490e7a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './weather-card.css';\r\nimport CountryCodes from './countryCodes';\r\n\r\nclass WeatherCard extends React.Component {\r\n\r\n    state = {\r\n        weatherIcon: null,\r\n        bgColor: \"#ffc7c2\",\r\n        textColor: \"#f02424\"\r\n    };\r\n\r\n    schemes = {\r\n        clear: { weatherIcon: \"clear\", bgColor: \"#ffcf91\", textColor: \"#ff740a\" },\r\n        cloudy: { weatherIcon: \"cloudy\", bgColor: \"#1da2c4\", textColor: \"#36b8c9\" },\r\n        drizzle: { weatherIcon: \"drizzle\", bgColor: \"#cae0e8\", textColor: \"#3698c9\" },\r\n        rain: { weatherIcon: \"rain\", bgColor: \"#a1b2c2\", textColor: \"#2685de\" },\r\n        smoke: { weatherIcon: 'smoke', bgColor: \"#c3c4c9\", textColor: \"#17181c\" },\r\n        thunderstorm: { weatherIcon: \"thunderstorm\", bgColor: \"#ffc7c2\", textColor: \"#f02424\" },\r\n        snow: {weatherIcon: \"snow\", bgColor: \"#d0f2ed\", textColor: \"#0affda\" },\r\n        haze: { weatherIcon: \"haze\", bgColor: \"#ffc7c2\", textColor: \"#f02424\" },\r\n        tornado: { weatherIcon: \"tornado\", bgColor: \"#ffc7c2\", textColor: \"#f02d424\" },\r\n        error: { weatherIcon: \"wind-icon\", bgColor: \"#ffc7c2\", textColor: \"#f02d424\" },\r\n    }\r\n\r\n    assingScheme = (wId) => {\r\n        if (232 >= wId >= 200) {\r\n            return this.schemes.thunderstorm\r\n        }\r\n        else if (321 >= wId >= 300) {\r\n            return this.schemes.drizzle\r\n        }\r\n        else if (540 >= wId) {\r\n            console.log(\"assinged rain\")\r\n            return this.schemes.rain\r\n            \r\n        }\r\n        else if (622 >= wId >= 600) {\r\n            return this.schemes.snow\r\n        }\r\n        else if ([731, 761, 762, 771].includes(wId)) {\r\n            return this.schemes.haze\r\n        }\r\n        else if ([711, 701, 721, 741, 751].includes(wId)) {\r\n            return this.schemes.smoke\r\n        }\r\n        else if (wId === 781) {\r\n            return this.schemes.tornado\r\n        }\r\n        else if (wId === 800) {\r\n            return this.schemes.clear\r\n        }\r\n        else if (804 >= wId >= 801) {\r\n            \r\n            return this.schemes.cloudy\r\n        }\r\n        else {\r\n            console.log(\"assinged else to \" + wId)\r\n            return  this.schemes.cloudy\r\n        }\r\n    }\r\n\r\n\r\n    assignScreen = () => {\r\n        if (this.props.data) {\r\n            const scheme = this.assingScheme(this.props.data.id);\r\n            if (scheme) {\r\n            return (\r\n                <div \r\n                className=\"weather-card\"\r\n                style={{background: `linear-gradient(0deg, ${scheme.bgColor} 0%, #ffffff 100%)`}}\r\n                >\r\n                <h3 style={{color: scheme.textColor}}>{this.props.data.location}, {CountryCodes[this.props.data.code]}</h3>\r\n\r\n                <div className=\"main-info\">\r\n                    <div>\r\n                    <h1>{this.props.data.temperature}Â°C</h1>\r\n                    <h2>{this.props.data.description}</h2>\r\n                    </div>\r\n                    <img src={`./weather-icons/${scheme.weatherIcon}.svg`} alt=\"Sunny\" />\r\n                </div>\r\n\r\n                <div className=\"meta\">\r\n                    <div>\r\n                        <img src=\"./wind-icon.svg\" alt=\"Wind Speed\"/>\r\n                        <p>{this.props.data.wind_speed} m/s</p>\r\n                    </div>\r\n                    <div>\r\n                        <img src=\"./humidity-icon.svg\" alt=\"Humidity\"/>\r\n                        <p>{this.props.data.humidity}%</p>\r\n                    </div>\r\n                    <div>\r\n                        <img src=\"./pressure-icon.svg\" alt=\"Precipitation\"/>\r\n                        <p>{this.props.data.pressure} hPa</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            );\r\n        }\r\n    }\r\n        else {\r\n            return (<div className=\"weather-card\" style={{background: `linear-gradient(0deg, #ffc1ba 0%, #ffffff 100%)`}}>\r\n                <div className=\"error\">\r\n                    <img src=\"./error-icon.svg\" alt=\"ERROR!\"/>\r\n                    <p>Unable to fetch weather data.</p>\r\n                </div>\r\n            </div>);\r\n        }\r\n    }\r\n   \r\n\r\n    render () {\r\n        \r\n        return (\r\n            this.assignScreen()\r\n        );\r\n    \r\n    }\r\n}\r\n\r\nexport default WeatherCard;\r\n\r\n\r\n/*\r\n\r\n\r\nschemes = {\r\n        clear: { weatherIcon: \"clear\", bgColor: \"#ffc7c2\", textColor: \"#f02424\" },\r\n        cloudy: { weatherIcon: \"cloudy\", bgColor: \"#ffc7c2\", textColor: \"#f02424\" },\r\n        drizzle: { weatherIcon: \"drizzle\", bgColor: \"#ffc7c2\", textColor: \"#f02424\" },\r\n        rain: { weatherIcon: \"rain\", bgColor: \"#ffc7c2\", textColor: \"#f02424\" },\r\n        smoke: { weatherIcon: 'smoke', bgColor: \"#ffc7c2\", textColor: \"#f02424\" },\r\n        thunderstorm: { weatherIcon: \"thunderstorm\", bgColor: \"#ffc7c2\", textColor: \"#f02424\" },\r\n        snow: {weatherIcon: \"snow\", bgColor: \"#ffc7c2\", textColor: \"#f02424\" },\r\n        haze: { weatherIcon: \"haze\", bgColor: \"#ffc7c2\", textColor: \"#f02424\" },\r\n        tornado: { weatherIcon: \"tornado\", bgColor: \"#ffc7c2\", textColor: \"#f02424\" },\r\n    }\r\n*/","import React from 'react';\r\nimport './search-bar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n\r\n    state = {\r\n        query: \"\"\r\n    };\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"search-bar\">\r\n                <form onSubmit={(event)=>{event.preventDefault();this.props.onSub({q: this.state.query});}}>\r\n                    <input\r\n                    type=\"text\"\r\n                    placeholder=\"Search For Specific Location\"\r\n                    onChange={(e)=> {this.setState({query: e.target.value})}} />\r\n                </form>\r\n\r\n                <button onClick={\r\n                    () => {\r\n                        window.navigator.geolocation.getCurrentPosition((pos) => {\r\n                            this.props.onSub({\r\n                                lat: pos.coords.latitude,\r\n                                lon: pos.coords.longitude\r\n                            })\r\n                    })\r\n                    }\r\n                }><ion-icon name=\"locate\"></ion-icon></button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://api.unsplash.com',\r\n    headers: { authorization: 'Client-ID 5382fd105af4991e3ec81825b2ea0be8a2919eb740b124b5f575754c61a7cadc'}\r\n});","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: \"https://api.openweathermap.org\",\r\n});","import React from 'react';\r\nimport WeatherCard from './WeatherCard';\r\nimport SearchBar from './SearchBar';\r\nimport unsplash from './api/unsplash';\r\nimport weather from './api/weather';\r\nimport './app.css';\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        data: null,\r\n        background: null\r\n    };\r\n\r\n\r\n\r\n    fetchBackground = async (des) => {\r\n        const response = await unsplash.get('/search/photos', {\r\n            params: {\r\n                query: des\r\n            }\r\n        });\r\n        return response\r\n    }\r\n\r\n\r\n    fetchWeather = async (query) => {\r\n        console.log('Running fetchWeather')\r\n        const response = await weather.get('/data/2.5/weather?appid=d47bc80a025474805889956634c8367b', {\r\n            params: query\r\n        });\r\n\r\n    \r\n        //const bg = await this.fetchBackground(this.response.weather.description);\r\n\r\n        this.setState({\r\n            data: {\r\n                location: response.data.name,\r\n                temperature: Math.round(response.data.main.temp-273.15),\r\n                description: response.data.weather[0].main,\r\n                wind_speed: response.data.wind.speed,\r\n                humidity: response.data.main.humidity,\r\n                pressure: response.data.main.pressure,\r\n                id: response.data.weather[0].id,\r\n                code: response.data.sys.country\r\n            },\r\n            //background: bg.results[Math.floor(Math.random() * results.length)].urls.regular\r\n        })\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"app\">\r\n                <SearchBar onSub={this.fetchWeather}/>\r\n                <WeatherCard data={this.state.data}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));"],"sourceRoot":""}